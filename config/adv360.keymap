#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"
    #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL      &kp N1            &kp N2     &kp N3          &kp N4              &kp N5  &tog 1                                                                    &mo 3       &kp N6  &kp N7                   &kp N8        &kp N9            &kp N0                 &kp MINUS
&kp TAB        &kp Q             &kp W      &kp E           &kp R               &kp T   &none                                                                     &none       &kp Y   &kp U                    &kp I         &kp O             &kp P                  &kp BSLH
&mt LCTRL ESC  &kp A             &kp S      &kp D           &kp F               &kp G   &none     &mt LCTRL ESCAPE  &kp LEFT_GUI      &kp LEFT_GUI   &kp RCTRL    &caps_word  &kp H   &kp J                    &kp K         &kp L             &kp SEMICOLON          &mt RCTRL SQT
&kp LSHFT      &hm LEFT_SHIFT Z  &kp X      &kp C           &kp V               &kp B                               &kp HOME          &kp PG_UP                               &kp N   &kp M                    &kp COMMA     &kp DOT           &hm RIGHT_SHIFT SLASH  &mt RSHFT MINUS
&mo 2          &kp GRAVE         &kp MINUS  &kp LEFT_ARROW  &mt LEFT_GUI RIGHT          &kp BSPC  &lt 1 TAB         &kp LEFT_ALT      &kp RIGHT_ALT  &lt 2 ENTER  &kp SPACE           &mt LEFT_ALT DOWN_ARROW  &kp UP_ARROW  &kp SINGLE_QUOTE  &kp BACKSLASH          &mo 2
            >;
        };

        layer_keypad {
            bindings = <
&none     &kp F1            &kp F2             &kp F3                &kp F4                 &kp F5         &trans                                                          &mo 3       &kp F6     &kp F7        &kp F8        &kp F9        &kp F10     &kp F11
&kp TAB   &kp EXCL          &kp AT             &kp HASH              &kp DOLLAR             &kp PERCENT    &none                                                           &none       &kp SLASH  &kp N7        &kp N8        &kp N9        &kp MINUS   &kp F12
&kp HOME  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PAGE_UP    &none     &mt LCTRL ESCAPE  &kp LALT      &kp LGUI   &kp RCTRL  &caps_word  &kp STAR   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS    &kp BACKSPACE
&kp END   &kp CARET         &kp AMPERSAND      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PAGE_DOWN                              &kp HOME      &kp PG_UP                         &kp EQUAL  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD  &kp EQUAL
&mo 2     &kp GRAVE         &kp CAPS           &kp LEFT              &trans                                &kp BSPC  &kp DEL           &kp END       &kp PG_DN  &kp ENTER  &kp N0                 &trans        &kp DOWN      &kp DOT       &trans      &mo 2
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3                &kp F4                    &kp F5        &kp F6      &tog 1                                      &mo 3   &kp F7                 &kp F8                 &kp F9                 &kp F10                &kp F11    &kp F12
&trans  &trans  &kp C_PREV            &kp C_PLAY_PAUSE          &kp C_NEXT    &kp C_STOP  &none                                       &none   &kp LS(LA(LC(LG(W))))  &kp LS(LA(LC(LG(T))))  &kp LS(LA(LC(LG(I))))  &kp LS(LA(LC(LG(O))))  &kp LA(S)  &trans
&trans  &trans  &kp C_BRIGHTNESS_INC  &kp LG(LS(LC(NUMBER_4)))  &kp C_VOL_UP  &kp C_MUTE  &none   &trans  &trans      &trans  &trans  &none   &kp LEFT               &kp DOWN               &kp UP                 &kp RIGHT              &kp LA(A)  &trans
&trans  &trans  &kp C_BRIGHTNESS_DEC  &kp LG(LS(NUMBER_4))      &kp C_VOL_DN  &trans                      &trans      &trans                  &kp LS(LA(LC(LG(N))))  &kp LS(LA(LC(LG(E))))  &kp LS(LA(LC(LG(S))))  &kp LS(LA(LC(LG(C))))  &trans     &trans
&trans  &trans  &trans                &trans                    &trans                    &trans  &trans  &trans      &trans  &trans  &trans                         &trans                 &trans                 &trans                 &trans     &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none   &none       &none       &none   &none  &none
&none  &none         &trans        &trans        &none         &trans        &bootloader                                            &bootloader             &none   &none       &trans      &trans  &none  &none
&none  &none         &trans        &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none   &none       &none       &none   &none  &none
&none  &none         &none         &trans        &macro_ver    &none                             &none      &none                                           &trans  &none       &none       &none   &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                 &bl BL_INC  &bl BL_DEC  &none   &none  &none
            >;
        };
    };
};
